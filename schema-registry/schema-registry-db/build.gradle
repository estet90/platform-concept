import liquibase.integration.commandline.LiquibaseCommandLine
import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

buildscript {
    dependencies {
        classpath "org.liquibase:liquibase-core:$liquibaseVersion"
        classpath "info.picocli:picocli:$picocliVersion"
        classpath "org.jooq:jooq-codegen:$jooqVersion"
        classpath "org.postgresql:postgresql:$postgresqlVersion"
        classpath "org.glassfish.jaxb:jaxb-runtime:$jaxbVersion"
    }
}

plugins {
    id "java-library"
}

dependencies {
    api("org.jooq:jooq:$jooqVersion") {
        exclude group: "com.sun.activation", module: "jakarta.activation"
    }
}

def dbUrl = "jdbc:postgresql://localhost:5432/schema_registry"
def dbUsername = "schema_registry_admin"
def dbPassword = "admin"
def schema = "schema_registry"

def jooqOut = "build/jooq/src/main/java"

task migrate() {
    outputs.dir("$projectDir/$jooqOut")
    doLast {
        String[] args = [
                "--driver=org.postgresql.Driver",
                "--username=$dbUsername",
                "--password=$dbPassword",
                "--url=$dbUrl",
                "--changeLogFile=/src/main/resources/db/migration/changelog.xml",
                "--liquibaseSchemaName=$schema",
                "--classpath=$projectDir/",
                "migrate"
        ]
        def result = new LiquibaseCommandLine().execute(args)
        if (result != 0) {
            throw new RuntimeException("Ошибка при выполнении миграций. Код ошибки: ${result}")
        }
    }
}

task generate() {
    dependsOn migrate
    def config = new Configuration()
            .withGenerator(new Generator()
                    .withDatabase(new Database()
                            .withName("org.jooq.meta.postgres.PostgresDatabase")
                            .withInputSchema("$schema"))
                    .withTarget(new Target()
                            .withDirectory(project.file(jooqOut).getAbsolutePath())
                            .withPackageName("${generatedCodeBasePackage}.model.jooq"))
                    .withGenerate(new Generate()
                            .withJavaTimeTypes(true))
            )
            .withJdbc(new Jdbc()
                    .withDriver("org.postgresql.Driver")
                    .withUrl(dbUrl)
                    .withUser(dbUsername)
                    .withPassword(dbPassword)
            )
    try {
        GenerationTool.generate(config)
    } catch (Exception e) {
        e.printStackTrace()
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    getArchiveClassifier().set("sources")
}

compileJava() {
    dependsOn generate
    sourceSets.main.java {
        srcDirs jooqOut
    }
}