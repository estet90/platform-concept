schema {
    mutation: Mutation
    query: Query
}

type Query {
    filter(request: FilterRequest!) : FilterResponse!
    getById(request: GetByIdRequest!): GetByIdResponse!
}

type Mutation {
    update(request: UpdateRequest!) : UpdateResponse!
}

input FilterRequest {
    id: Long!
    name: String!
    date: Date
    wrapper: Wrapper!
}

input Wrapper {
    dateTime: DateTime!
    description: String
}

type FilterResponse {
    data: [FilterResponseData!]
}

type FilterResponseData {
    id: Long!
    name: String!
    fullName: String
    description: String
    date: Date
}

input UpdateRequest {
    data: [UpdateRequestData!]
}

input UpdateRequestData {
    id: Long!
    name: String!
}

type UpdateResponse {
    id: Long!
    name: String!
}

input GetByIdRequest {
    id: Long!
    type: Type
}

type GetByIdResponse {
    type: Type
}

enum Type {
    SIMPLE, NE_SIMPLE
}

scalar Long
scalar Date
scalar DateTime
